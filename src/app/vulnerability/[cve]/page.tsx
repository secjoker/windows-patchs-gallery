"use client"

import { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import Link from "next/link";
import { format } from "date-fns";
import { ArrowLeft, AlertTriangle, Shield, FileText, GitBranch, ExternalLink, Moon, Sun, Info, Server, Calendar, Tag } from "lucide-react";
import { fetchVulnerabilities, VulnerabilityDetail } from "@/lib/api";
import { convertToVulnerabilityDetail } from "@/lib/fix-type-exports";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import dynamic from "next/dynamic";

// 动态导入图表组件以避免SSR问题
const RadarChart = dynamic(() => import("@/components/radar-chart"), { ssr: false });
const VulnerabilityTimeline = dynamic(() => import("@/components/vulnerability-timeline"), { ssr: false });
const VulnerabilityFlowchart = dynamic(() => import("@/components/vulnerability-flowchart"), { ssr: false });

export default function VulnerabilityDetailPage() {
  const params = useParams();
  const cveNumber = params.cve as string;
  
  const [vulnerability, setVulnerability] = useState<VulnerabilityDetail | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [darkMode, setDarkMode] = useState<boolean>(false);
  const [isMounted, setIsMounted] = useState<boolean>(false);
  
  // 初始化深色模式
  useEffect(() => {
    setIsMounted(true);
    const isDarkMode = localStorage.getItem('darkMode') === 'true' || 
      (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches);
    setDarkMode(isDarkMode);
    
    if (isDarkMode) {
      document.documentElement.classList.add('dark');
    }
  }, []);
  
  // 切换深色/浅色模式
  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
    localStorage.setItem('darkMode', (!darkMode).toString());
    document.documentElement.classList.toggle('dark');
  };
  
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      
      try {
        // 获取过去90天的漏洞信息
        const endDate = new Date();
        const startDate = new Date();
        startDate.setDate(startDate.getDate() - 90);
        
        const data = await fetchVulnerabilities(startDate, endDate);
        // 使用id字段查找匹配的CVE
        const found = data.find(v => v.id === cveNumber);
        
        if (found) {
          // 使用工具函数转换为详细信息
          const detailData = convertToVulnerabilityDetail(found);
          setVulnerability(detailData);
        } else {
          setError(`未找到漏洞 ${cveNumber} 的详细信息。`);
        }
      } catch (err) {
        setError("获取漏洞数据失败，请稍后重试。");
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, [cveNumber]);
  
  // 加载状态
  if (loading) {
    return (
      <main className="flex min-h-screen flex-col items-center justify-center p-6 bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300">
        <div className="z-10 max-w-5xl w-full">
          <div className="text-center py-8">
            <div className="inline-block h-12 w-12 animate-spin rounded-full border-4 border-solid border-blue-600 border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]"></div>
            <p className="mt-4 text-lg font-medium">正在加载漏洞详情...</p>
          </div>
        </div>
      </main>
    );
  }
  
  // 错误状态
  if (error) {
    return (
      <main className="flex min-h-screen flex-col items-center p-6 md:p-12 bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300">
        <div className="z-10 max-w-5xl w-full">
          <div className="flex justify-between items-center mb-8">
            <Link href="/">
              <Button variant="outline" className="flex items-center gap-2 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors">
                <ArrowLeft className="h-4 w-4" /> 返回首页
              </Button>
            </Link>
            
            {isMounted && (
              <Button 
                variant="ghost" 
                size="icon"
                onClick={toggleDarkMode}
                className="rounded-full hover:bg-gray-200 dark:hover:bg-gray-800"
              >
                {darkMode ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
              </Button>
            )}
          </div>
          
          <div className="bg-red-50 dark:bg-red-900/30 border-l-4 border-red-500 p-6 rounded-lg shadow-sm">
            <div className="flex items-start">
              <AlertTriangle className="h-6 w-6 text-red-500 mr-4 mt-1 flex-shrink-0" />
              <div>
                <h2 className="text-xl font-bold text-red-700 dark:text-red-400 mb-2">发生错误</h2>
                <p className="text-gray-700 dark:text-gray-300">{error}</p>
              </div>
            </div>
          </div>
        </div>
      </main>
    );
  }
  
  // 未找到漏洞
  if (!vulnerability) {
    return (
      <main className="flex min-h-screen flex-col items-center p-6 md:p-12 bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300">
        <div className="z-10 max-w-5xl w-full">
          <div className="flex justify-between items-center mb-8">
            <Link href="/">
              <Button variant="outline" className="flex items-center gap-2 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors">
                <ArrowLeft className="h-4 w-4" /> 返回首页
              </Button>
            </Link>
            
            {isMounted && (
              <Button 
                variant="ghost" 
                size="icon"
                onClick={toggleDarkMode}
                className="rounded-full hover:bg-gray-200 dark:hover:bg-gray-800"
              >
                {darkMode ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
              </Button>
            )}
          </div>
          
          <div className="bg-blue-50 dark:bg-blue-900/30 border-l-4 border-blue-500 p-6 rounded-lg shadow-sm">
            <div className="flex items-start">
              <Info className="h-6 w-6 text-blue-500 mr-4 mt-1 flex-shrink-0" />
              <div>
                <h2 className="text-xl font-bold text-blue-700 dark:text-blue-400 mb-2">未找到信息</h2>
                <p className="text-gray-700 dark:text-gray-300">未找到指定漏洞的详细信息。</p>
              </div>
            </div>
          </div>
        </div>
      </main>
    );
  }
  
  // 格式化发布日期
  const releaseDate = new Date(vulnerability.releaseDate);
  const formattedDate = format(releaseDate, "yyyy年MM月dd日");
  
  // 确定严重性类和颜色
  let severityClass = "bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200";
  let severityColor = "text-gray-700 dark:text-gray-300";
  let severityBg = "from-gray-400/20 to-gray-500/20 dark:from-gray-700/50 dark:to-gray-800/50";
  
  if (vulnerability.severity === "Critical") {
    severityClass = "bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200";
    severityColor = "text-red-700 dark:text-red-300";
    severityBg = "from-red-400/20 to-red-500/20 dark:from-red-700/40 dark:to-red-800/40";
  } else if (vulnerability.severity === "Important") {
    severityClass = "bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-200";
    severityColor = "text-orange-700 dark:text-orange-300";
    severityBg = "from-orange-400/20 to-orange-500/20 dark:from-orange-700/40 dark:to-orange-800/40";
  } else if (vulnerability.severity === "Moderate") {
    severityClass = "bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-200";
    severityColor = "text-yellow-700 dark:text-yellow-300";
    severityBg = "from-yellow-400/20 to-yellow-500/20 dark:from-yellow-700/40 dark:to-yellow-800/40";
  } else if (vulnerability.severity === "Low") {
    severityClass = "bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200";
    severityColor = "text-blue-700 dark:text-blue-300";
    severityBg = "from-blue-400/20 to-blue-500/20 dark:from-blue-700/40 dark:to-blue-800/40";
  }
  
  return (
    <main className="min-h-screen p-0 bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300">
      {/* 导航栏 */}
      <nav className="sticky top-0 z-50 bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-800">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <div className="flex items-center gap-2">
            <Link href="/">
              <Button variant="ghost" className="flex items-center gap-2 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors">
                <ArrowLeft className="h-4 w-4" /> 返回首页
              </Button>
            </Link>
          </div>
          
          {isMounted && (
            <Button 
              variant="ghost" 
              size="icon"
              onClick={toggleDarkMode}
              className="rounded-full hover:bg-gray-200 dark:hover:bg-gray-800"
            >
              {darkMode ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
            </Button>
          )}
        </div>
      </nav>
      
      {/* Hero区域 - 玻璃态效果 */}
      <div className={`relative py-16 lg:py-24 overflow-hidden bg-gradient-to-br ${severityBg}`}>
        <div className="absolute inset-0 pointer-events-none">
          <div className="absolute inset-0 opacity-30 mix-blend-overlay" 
               style={{backgroundImage: 'url("data:image/svg+xml,%3Csvg width=\'100\' height=\'100\' viewBox=\'0 0 100 100\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cpath d=\'M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z\' fill=\'%23000000\' fill-opacity=\'0.1\' fill-rule=\'evenodd\'/%3E%3C/svg%3E")'}}>
          </div>
        </div>

        <div className="container mx-auto px-4 md:px-8 relative">
          <div className="max-w-4xl mx-auto">
            <div className="flex flex-col md:flex-row md:items-end md:justify-between mb-8">
              <div>
                <div className="inline-flex items-center gap-1 text-sm mb-3 text-gray-600 dark:text-gray-400">
                  <Calendar className="h-4 w-4" />
                  <span>发布于 {formattedDate}</span>
                </div>
                <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold tracking-tight !leading-tight">
                  {vulnerability.cveNumber}
                </h1>
              </div>
              
              <div className="flex flex-wrap gap-2 mt-4 md:mt-0">
                {vulnerability.severity && (
                  <span className={`${severityClass} inline-flex items-center gap-1 text-sm font-medium px-3 py-1 rounded-full`}>
                    <Shield className="h-4 w-4" />
                    {vulnerability.severity}
                  </span>
                )}
                {vulnerability.impact && (
                  <span className="bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-200 inline-flex items-center gap-1 text-sm font-medium px-3 py-1 rounded-full">
                    <Tag className="h-4 w-4" />
                    {vulnerability.impact}
                  </span>
                )}
                {vulnerability.exploited === "Yes" && (
                  <span className="bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200 inline-flex items-center gap-1 text-sm font-medium px-3 py-1 rounded-full">
                    <AlertTriangle className="h-4 w-4" />
                    已被利用
                  </span>
                )}
                {vulnerability.publiclyDisclosed === "Yes" && (
                  <span className="bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-200 inline-flex items-center gap-1 text-sm font-medium px-3 py-1 rounded-full">
                    <FileText className="h-4 w-4" />
                    公开披露
                  </span>
                )}
              </div>
            </div>
            
            <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-md rounded-xl shadow-xl p-6 md:p-8 border border-gray-200 dark:border-gray-700">
              <h2 className="text-2xl font-bold mb-4">{vulnerability.cveTitle}</h2>
              <p className="text-gray-700 dark:text-gray-300 text-lg first-letter:text-3xl first-letter:font-serif first-letter:mr-1 first-letter:float-left first-letter:font-bold">
                {vulnerability.description?.replace(/<\/?p>/g, '') || '无描述信息'}
              </p>
            </div>
          </div>
        </div>
      </div>
      
      <div className="container mx-auto px-4 md:px-8 py-12">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 lg:gap-12">
          {/* 主要内容区域 */}
          <div className="lg:col-span-2">
            {/* 详细描述卡片 */}
            <Card className="mb-8 hover:shadow-md transition-shadow duration-300 overflow-hidden border-0 shadow-lg">
              <CardHeader className={`bg-gradient-to-r ${severityColor}`}>
                <CardTitle className="flex items-center gap-2 text-xl">
                  <FileText className="h-5 w-5" /> 漏洞详情
                </CardTitle>
              </CardHeader>
              <CardContent className="p-6">
                <div className="prose dark:prose-invert max-w-none">
                  <div className="mt-4" dangerouslySetInnerHTML={{ __html: vulnerability.description || '' }} />
                </div>
                
                {/* CWE引用 */}
                {vulnerability.cweList && vulnerability.cweList.length > 0 && (
                  <div className="mt-8">
                    <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                      <FileText className="h-5 w-5" /> CWE 引用
                    </h3>
                    <ul className="space-y-2">
                      {vulnerability.cweList.map((cwe: string, index: number) => (
                        <li key={index} className="bg-gray-50 dark:bg-gray-800/50 p-3 rounded-lg">
                          {cwe}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
                
                {/* 影响路径可视化 */}
                <div className="mt-8">
                  <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                    <Server className="h-5 w-5" /> 攻击路径分析
                  </h3>
                  <div className="bg-gray-50 dark:bg-gray-800/50 p-4 rounded-lg">
                    <VulnerabilityFlowchart 
                      vulnerabilityType={vulnerability.impact || "未知"} 
                      isDarkMode={darkMode}
                    />
                  </div>
                </div>
                
                {/* 附加信息 */}
                {vulnerability.articles && vulnerability.articles.length > 0 && (
                  <div className="mt-8">
                    <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                      <Info className="h-5 w-5" /> 附加信息
                    </h3>
                    {vulnerability.articles.map((article: any, index: number) => (
                      <div key={index} className="mb-6 bg-gray-50 dark:bg-gray-800/50 p-4 rounded-lg">
                        <h4 className="font-semibold text-lg mb-2">{article.articleType}</h4>
                        <div className="prose dark:prose-invert max-w-none" dangerouslySetInnerHTML={{ __html: article.description }} />
                      </div>
                    ))}
                  </div>
                )}
                
                {/* 修订历史 */}
                {vulnerability.revisions && vulnerability.revisions.length > 0 && (
                  <div className="mt-8">
                    <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                      <GitBranch className="h-5 w-5" /> 修订历史
                    </h3>
                    <div className="bg-gray-50 dark:bg-gray-800/50 p-4 rounded-lg">
                      <VulnerabilityTimeline 
                        revisions={vulnerability.revisions}
                        isDarkMode={darkMode}
                      />
                    </div>
                  </div>
                )}
                
                {/* 外部链接 */}
                <div className="mt-8 flex flex-col sm:flex-row gap-4">
                  <a 
                    href={vulnerability.mitreUrl} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="flex items-center gap-2 bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 px-4 py-3 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-800/50 transition-colors"
                  >
                    <ExternalLink className="h-5 w-5" />
                    在 MITRE 上查看
                  </a>
                  <a 
                    href={`https://msrc.microsoft.com/update-guide/vulnerability/${vulnerability.cveNumber}`} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="flex items-center gap-2 bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 px-4 py-3 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-800/50 transition-colors"
                  >
                    <ExternalLink className="h-5 w-5" />
                    在微软安全响应中心查看
                  </a>
                </div>
              </CardContent>
            </Card>
          </div>
          
          {/* 侧边栏 */}
          <div className="lg:col-span-1">
            {/* CVSS评分可视化 */}
            <Card className="mb-8 hover:shadow-md transition-shadow duration-300 overflow-hidden border-0 shadow-lg">
              <CardHeader className={`bg-gradient-to-r ${severityColor}`}>
                <CardTitle className="flex items-center gap-2 text-xl">
                  <Shield className="h-5 w-5" /> 安全评分
                </CardTitle>
              </CardHeader>
              <CardContent className="p-6">
                <div className="aspect-square mb-6">
                  <RadarChart 
                    baseScore={vulnerability.baseScore || 0} 
                    severity={vulnerability.severity || "未知"} 
                    isDarkMode={darkMode}
                  />
                </div>
                <div className="grid grid-cols-2 gap-4 mt-4">
                  <div className="bg-gray-50 dark:bg-gray-800/50 p-3 rounded-lg text-center">
                    <div className="text-sm text-gray-500 dark:text-gray-400">基础评分</div>
                    <div className="text-2xl font-bold mt-1">{vulnerability.baseScore || "N/A"}</div>
                  </div>
                  <div className="bg-gray-50 dark:bg-gray-800/50 p-3 rounded-lg text-center">
                    <div className="text-sm text-gray-500 dark:text-gray-400">影响类型</div>
                    <div className="text-lg font-medium mt-1">{vulnerability.impact || "未知"}</div>
                  </div>
                </div>
              </CardContent>
            </Card>
            
            {/* 相关安全更新 */}
            {vulnerability.kbNumbers && vulnerability.kbNumbers.length > 0 && (
              <Card className="mb-8 hover:shadow-md transition-shadow duration-300 overflow-hidden border-0 shadow-lg">
                <CardHeader className={`bg-gradient-to-r ${severityColor}`}>
                  <CardTitle className="flex items-center gap-2 text-xl">
                    <Server className="h-5 w-5" /> 安全更新
                  </CardTitle>
                </CardHeader>
                <CardContent className="p-6">
                  <ul className="space-y-3">
                    {vulnerability.kbNumbers.map((kb: string, index: number) => (
                      <li key={index} className="bg-gray-50 dark:bg-gray-800/50 p-3 rounded-lg flex items-center">
                        <FileText className="h-5 w-5 mr-3 text-blue-500" />
                        <a 
                          href={`https://support.microsoft.com/help/${kb.replace('KB', '')}`} 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="text-blue-600 dark:text-blue-400 hover:underline"
                        >
                          {kb}
                        </a>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            )}
            
            {/* 受影响产品 */}
            {vulnerability.productAffected && vulnerability.productAffected.length > 0 && (
              <Card className="mb-8 hover:shadow-md transition-shadow duration-300 overflow-hidden border-0 shadow-lg">
                <CardHeader className={`bg-gradient-to-r ${severityColor}`}>
                  <CardTitle className="flex items-center gap-2 text-xl">
                    <Server className="h-5 w-5" /> 受影响产品
                  </CardTitle>
                </CardHeader>
                <CardContent className="p-6">
                  <ul className="space-y-2">
                    {vulnerability.productAffected.map((product: string, index: number) => (
                      <li key={index} className="bg-gray-50 dark:bg-gray-800/50 p-3 rounded-lg">
                        {product}
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </main>
  );
}
