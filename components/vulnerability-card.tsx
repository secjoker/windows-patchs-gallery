"use client"

import React from "react"
import { Card, CardContent, CardFooter, CardHeader } from "./ui/card"
import { Badge } from "./ui/badge"
import { format, parseISO } from "date-fns"
import { zhCN } from "date-fns/locale"
import { AlertTriangle, Calendar, FileText, Info, Server, Shield, Zap } from "lucide-react"
import { formatDate, getSeverityChinese, getImpactChinese } from "@/lib/utils"

export interface Vulnerability {
  cveNumber: string
  cveTitle: string
  releaseDate: string
  severity: "Critical" | "Important" | "Moderate" | "Low"
  baseScore: number
  impact: string
  exploited: boolean
  customerActionRequired: boolean
  kbNumbers: string[]
  productAffected: string[]
}

interface VulnerabilityCardProps {
  vulnerability: Vulnerability
  onClick?: () => void
}

export function VulnerabilityCard({ vulnerability, onClick }: VulnerabilityCardProps) {
  const { 
    cveNumber, 
    cveTitle, 
    releaseDate, 
    severity, 
    baseScore, 
    impact, 
    exploited, 
    customerActionRequired, 
    kbNumbers, 
    productAffected 
  } = vulnerability
  
  // 格式化日期
  const formattedDate = React.useMemo(() => {
    try {
      return format(parseISO(releaseDate), 'yyyy年MM月dd日', { locale: zhCN })
    } catch (error) {
      return releaseDate
    }
  }, [releaseDate])
  
  // 根据严重程度获取对应的样式
  const getSeverityStyles = (severity: string) => {
    switch (severity) {
      case "Critical":
        return {
          badge: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300 hover:bg-red-200",
          icon: <AlertTriangle className="h-4 w-4 mr-1" />
        }
      case "Important":
        return {
          badge: "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300 hover:bg-orange-200",
          icon: <Info className="h-4 w-4 mr-1" />
        }
      case "Moderate":
        return {
          badge: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300 hover:bg-yellow-200",
          icon: <Shield className="h-4 w-4 mr-1" />
        }
      case "Low":
        return {
          badge: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300 hover:bg-green-200",
          icon: <Shield className="h-4 w-4 mr-1" />
        }
      default:
        return {
          badge: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300 hover:bg-blue-200",
          icon: <Info className="h-4 w-4 mr-1" />
        }
    }
  }
  
  const severityStyle = getSeverityStyles(severity)
  
  return (
    <Card 
      className="overflow-hidden hover:shadow-md transition-shadow cursor-pointer dark:border-gray-800 h-full flex flex-col"
      onClick={onClick}
    >
      <CardHeader className="p-4 bg-gray-50 dark:bg-gray-900/40 flex flex-row justify-between items-center space-y-0 pb-2">
        <div className="flex items-center">
          <Badge 
            className={severityStyle.badge}
            title={`CVSS基础评分: ${baseScore}`}
          >
            {severityStyle.icon}
            {severity === "Critical" ? "严重" : 
             severity === "Important" ? "重要" : 
             severity === "Moderate" ? "中等" : "低"}
          </Badge>
          
          <div className="ml-2 flex space-x-1">
            {exploited && (
              <Badge 
                variant="destructive" 
                className="px-2"
                title="此漏洞已在野外被利用"
              >
                <Zap className="h-3 w-3 mr-1" />
                已利用
              </Badge>
            )}
            
            {customerActionRequired && (
              <Badge 
                variant="outline" 
                className="border-amber-500 text-amber-600 dark:text-amber-400 px-2"
                title="需要客户采取行动"
              >
                <FileText className="h-3 w-3 mr-1" />
                需要处理
              </Badge>
            )}
          </div>
        </div>
        
        <div className="flex items-center text-sm text-gray-500 dark:text-gray-400">
          <Calendar className="h-3.5 w-3.5 mr-1" />
          <span>{formattedDate}</span>
        </div>
      </CardHeader>
      
      <CardContent className="p-4 pt-3 flex-grow">
        <div className="mb-3">
          <h3 className="text-lg font-medium tracking-tight">
            {cveNumber}
          </h3>
          <p className="text-sm text-gray-700 dark:text-gray-300 line-clamp-2 mt-1">
            {cveTitle}
          </p>
        </div>
        
        <div className="mb-4">
          <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-2">
            {impact}
          </p>
        </div>
        
        {productAffected.length > 0 && (
          <div className="flex items-start space-x-1.5 mb-2">
            <Server className="h-4 w-4 text-gray-500 mt-0.5" />
            <div className="flex-1">
              <p className="text-xs text-gray-600 dark:text-gray-400 font-medium mb-1">
                受影响产品:
              </p>
              <div className="flex flex-wrap gap-1">
                {productAffected.slice(0, 3).map((product, index) => (
                  <Badge key={index} variant="outline" className="text-xs px-1 py-0 h-5">
                    {product}
                  </Badge>
                ))}
                {productAffected.length > 3 && (
                  <Badge 
                    variant="outline" 
                    className="text-xs px-1 py-0 h-5"
                    title={productAffected.slice(3).join(", ")}
                  >
                    +{productAffected.length - 3}
                  </Badge>
                )}
              </div>
            </div>
          </div>
        )}
      </CardContent>
      
      <CardFooter className="p-4 pt-0 flex justify-between items-center border-t border-gray-100 dark:border-gray-800 text-xs text-gray-500">
        <div>
          {kbNumbers.length > 0 && (
            <div className="flex items-center">
              <FileText className="h-3.5 w-3.5 mr-1" />
              <span title={kbNumbers.join(", ")}>
                KB: {kbNumbers.slice(0, 2).join(', ')}{kbNumbers.length > 2 ? '...' : ''}
              </span>
            </div>
          )}
        </div>
        <span className="text-blue-600 dark:text-blue-400 hover:underline">查看详情</span>
      </CardFooter>
    </Card>
  )
}
