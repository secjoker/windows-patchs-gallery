"use client"

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { fetchVulnerabilities, Vulnerability } from "@/lib/api";
import { format } from "date-fns";
import { ArrowLeft } from "lucide-react";
import Link from "next/link";
import { useParams } from "next/navigation";
import { useEffect, useState } from "react";

export default function VulnerabilityDetailPage() {
  const params = useParams();
  const cveNumber = params.cve as string;
  
  const [vulnerability, setVulnerability] = useState<Vulnerability | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      
      try {
        // Fetch vulnerabilities from the last 90 days
        const endDate = new Date();
        const startDate = new Date();
        startDate.setDate(startDate.getDate() - 90);
        
        const data = await fetchVulnerabilities(startDate, endDate);
        const found = data.find(v => v.cveNumber === cveNumber);
        
        if (found) {
          setVulnerability(found);
        } else {
          setError(`Vulnerability ${cveNumber} not found.`);
        }
      } catch (err) {
        setError("Failed to fetch vulnerability data. Please try again.");
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, [cveNumber]);
  
  if (loading) {
    return (
      <main className="flex min-h-screen flex-col items-center p-6 md:p-24">
        <div className="z-10 max-w-5xl w-full">
          <div className="text-center py-8">
            <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]"></div>
            <p className="mt-2">Loading vulnerability details...</p>
          </div>
        </div>
      </main>
    );
  }
  
  if (error) {
    return (
      <main className="flex min-h-screen flex-col items-center p-6 md:p-24">
        <div className="z-10 max-w-5xl w-full">
          <Link href="/">
            <Button variant="outline" className="mb-4">
              <ArrowLeft className="mr-2 h-4 w-4" /> Back to Home
            </Button>
          </Link>
          
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
            <p>{error}</p>
          </div>
        </div>
      </main>
    );
  }
  
  if (!vulnerability) {
    return (
      <main className="flex min-h-screen flex-col items-center p-6 md:p-24">
        <div className="z-10 max-w-5xl w-full">
          <Link href="/">
            <Button variant="outline" className="mb-4">
              <ArrowLeft className="mr-2 h-4 w-4" /> Back to Home
            </Button>
          </Link>
          
          <div className="text-center py-8">
            <p>Vulnerability not found.</p>
          </div>
        </div>
      </main>
    );
  }
  
  // Format the release date
  const releaseDate = new Date(vulnerability.releaseDate);
  const formattedDate = format(releaseDate, "MMMM dd, yyyy");
  
  // Determine severity class
  let severityClass = "bg-gray-100 text-gray-800";
  if (vulnerability.severity === "Critical") {
    severityClass = "bg-red-100 text-red-800";
  } else if (vulnerability.severity === "Important") {
    severityClass = "bg-orange-100 text-orange-800";
  } else if (vulnerability.severity === "Low") {
    severityClass = "bg-blue-100 text-blue-800";
  }
  
  return (
    <main className="flex min-h-screen flex-col items-center p-6 md:p-24">
      <div className="z-10 max-w-5xl w-full">
        <Link href="/">
          <Button variant="outline" className="mb-4">
            <ArrowLeft className="mr-2 h-4 w-4" /> Back to Home
          </Button>
        </Link>
        
        <Card className="mb-8">
          <CardHeader>
            <div className="flex flex-col md:flex-row md:items-center md:justify-between">
              <div>
                <CardTitle className="text-2xl">{vulnerability.cveNumber}</CardTitle>
                <CardDescription>Released: {formattedDate}</CardDescription>
              </div>
              <div className="flex flex-wrap gap-2 mt-2 md:mt-0">
                {vulnerability.severity && (
                  <span className={`${severityClass} text-xs font-medium px-2.5 py-0.5 rounded`}>
                    {vulnerability.severity}
                  </span>
                )}
                {vulnerability.impact && (
                  <span className="bg-purple-100 text-purple-800 text-xs font-medium px-2.5 py-0.5 rounded">
                    {vulnerability.impact}
                  </span>
                )}
                {vulnerability.exploited === "Yes" && (
                  <span className="bg-red-100 text-red-800 text-xs font-medium px-2.5 py-0.5 rounded">
                    Exploited
                  </span>
                )}
                {vulnerability.publiclyDisclosed === "Yes" && (
                  <span className="bg-yellow-100 text-yellow-800 text-xs font-medium px-2.5 py-0.5 rounded">
                    Publicly Disclosed
                  </span>
                )}
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <h2 className="text-xl font-bold mb-2">{vulnerability.cveTitle}</h2>
            
            <div className="mt-4">
              <h3 className="text-lg font-semibold mb-2">Description</h3>
              <div className="prose max-w-none" dangerouslySetInnerHTML={{ __html: vulnerability.description }} />
            </div>
            
            {vulnerability.cweList && vulnerability.cweList.length > 0 && (
              <div className="mt-4">
                <h3 className="text-lg font-semibold mb-2">CWE References</h3>
                <ul className="list-disc pl-5">
                  {vulnerability.cweList.map((cwe, index) => (
                    <li key={index}>{cwe}</li>
                  ))}
                </ul>
              </div>
            )}
            
            {vulnerability.articles && vulnerability.articles.length > 0 && (
              <div className="mt-4">
                <h3 className="text-lg font-semibold mb-2">Additional Information</h3>
                {vulnerability.articles.map((article, index) => (
                  <div key={index} className="mb-4">
                    <h4 className="font-medium">{article.articleType}</h4>
                    <div className="prose max-w-none" dangerouslySetInnerHTML={{ __html: article.description }} />
                  </div>
                ))}
              </div>
            )}
            
            {vulnerability.revisions && vulnerability.revisions.length > 0 && (
              <div className="mt-4">
                <h3 className="text-lg font-semibold mb-2">Revision History</h3>
                {vulnerability.revisions.map((revision, index) => (
                  <div key={index} className="mb-2">
                    <p className="text-sm text-gray-600">
                      Version {revision.version} - {format(new Date(revision.revisionDate), "MMMM dd, yyyy")}
                    </p>
                    <div className="prose max-w-none" dangerouslySetInnerHTML={{ __html: revision.description }} />
                  </div>
                ))}
              </div>
            )}
            
            <div className="mt-6">
              <a 
                href={vulnerability.mitreUrl} 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-blue-600 hover:underline mr-4"
              >
                View on MITRE
              </a>
              <a 
                href={`https://msrc.microsoft.com/update-guide/vulnerability/${vulnerability.cveNumber}`} 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-blue-600 hover:underline"
              >
                View on Microsoft Security Response Center
              </a>
            </div>
          </CardContent>
        </Card>
      </div>
    </main>
  );
}
